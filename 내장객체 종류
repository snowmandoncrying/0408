
@ request 객체: HTTP 요청 메시지 정보를 제공
            url을 분석하고 사용자의 파라미터를 처리하는 역할을 한다.
            
            url 분석 : 개발자의 역할 중 가장 기본이다.
            사용자의 파라미터 처리 : 사용자가 요청한 것을 처리한다.
            꺼내서 가져올 땐 get() 메서드를 쓴다.

            범위는 페이지에서 페이지로 이동한다. (jsp > jsp)
            해당 페이지 내에서만 주고 받을 수 있다.
        
   # getParameter(String name) : 대표적으로 이용되는 함수이다.
                                파라미터 리스트에서 이름이 name인 파라미터의 값을 반환한다.
                                반환 유형 - String

   # getParameterValues(String name) : 파라미터 리스트에서 이름이 name인 파라미터가 여러 개일 경우,
                                      해당 파라미터들의 값을 배열 형태로 반환한다.
                                      반환 유형 - String []

   # getHeader(String name) : HTTP 요청 메시지 헤더에서 이름이 name인 속성값을 반환함


@ response 객체: HTTP 응답 메시지의 헤더 처리
            분석한 결과를 어떻게 보여줄까? > 보여줄 페이지를 결정한다. (반환 유형은 모두 void)
                                                
            # setContentType(String type) : HTTP 응답을 통해 반환될 페이지의 유형을 나타내는 MIME 타입 설정
            # setCharacterEncoding(String charset) : 반환될 페이지의 문자 인코딩 방식을 지정해 반환
            # sendRedirect(String url) : 지정된 url로 강제 이동


@ application 객체 : 서비스의 실행 기간 동안 유지될 필요가 있는 속성값 설정
            어느 브라우저에서든 사용할 수 있음 (가장 넓은 범위)

            # setAttribute(String namme, Object value) : name 속성값을 value로 지정
                                                반환 유형 : void
            # getAttribute(String name) : name 속성값을 가져옴
                                                반환 유형: Object
            # removeAttribute(String name) : name 속성값을 삭제함
                                                반환 유형: void
            # getAttributeNames() : 모든 name 속성 이름을 가져옴
                                                반환 유형: java.util.Enumeration
            # getRealPath(String url) : 주어진 url이 매핑된 시스템상의 실제 경로를 가져옴
                                                반환 유형: String

@ HTTP 프로토콜의 특징 : Connectionless 
                        HTTP 메시지 간에 정보 (쿼리 스트링)가 공유되지 않음
                        > 로그인 이후 다른 html 페이지에서 로그인 정보를 알기 어려움

@ session 객체 : 이름- 값 형태의 데이터를 클라이언트 단위(IP주소 + Agent)로 세션테이블(HashMap)에 저장
            데이터 유지 시간을 지정할 수 있다. (디폴트 값은 30분)

            # setAttribute(String name, Object value) : name 속성값을 value로 지정
                                    반환 유형: void
            # getAttribute(String name) : name 속성값을 가져옴
                                    반환 유형: Object
            # removeAttribute(String name) : name 속성값을 삭제
                                    반환 유형: void
            # getAttributeNames() : 모든 name 속성 이름을 가져옴
                                    반환 유형: java.util.Enumeration
            # setMaxInactiveInterval(int sec) : 세션 유지 시간을 초 단위로 설정
                                    반환 유형: void
            # invalidate() : 세션 정보를 삭제
                                    반환 유형: void
                        




















